#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app'); // refers to the app.js filename.
var debug = require('debug')('xpress-tarot:app');
var http = require('http');

/**
 * Set environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.set('server_name', 'Silly web service for Tarot readings')
app.set('x-powered-by', true)

/**
 * Create HTTP server. OBSOLETE WITH CONDITIONS WHICH WE DON"T NEED HERE
 * http.createServer()
 * The http module is no longer needed, unless you need to directly work with it
 * (socket.io/SPDY/HTTPS). The app can be started by using the app.listen() function.
 * 
 * var server = http.createServer(app);
 */


/**
 * Listen on provided port, on all network interfaces.
 */

var server = app.listen(port)
console.log(app.get('server_name'), "listening on port", port)

/**
 * Attach listeners
 */

server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
